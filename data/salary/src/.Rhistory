## Gibbs Sampler for tau ##
tau.chain[i] <- rgamma(1,n,sum(abs(lap.DF-mu.chain[i-1])))
## M-H Sampler for mu ##
mu.star <- rnorm(1,mu.chain[i-1],1)
r.num <- dlap(tau.chain[i-1],mu.star,lap.DF)
r.den <- dlap(tau.chain[i-1],mu.chain[i-1],lap.DF)
r <- r.num/r.den
#r <- dlap(tau.chain[i-1],mu.star,lap)/dlap(tau.chain[i-1],mu.chain[i-1],lap)
U <- runif(1)
if (U < min(1,r)) {
mu.chain[i] <- mu.star
} else {
mu.chain[i] <- mu.chain[i-1]
}
}
tau.chain
head(tau.chain)
lap <- read.table('C:/Users/Chris/Documents/Math 640 TA/laplace.txt', header = T)
lap.DF <- as.numeric(unlist(lap))
B <- 10000
n <- dim(lap.DF)[1]
tau.chain <- numeric(2*B)
mu.chain <- numeric(2*B)
tau.chain[1] <- 1
mu.chain[1] <- 1
dlap <- function(tau, mu, y) { exp(-tau * sum(abs(y - mu))) }
for (i in 2:(2*B)) {
browser()
## Gibbs Sampler for tau ##
tau.chain[i] <- rgamma(1,n,sum(abs(lap.DF-mu.chain[i-1])))
## M-H Sampler for mu ##
mu.star <- rnorm(1,mu.chain[i-1],1)
r.num <- dlap(tau.chain[i-1],mu.star,lap.DF)
r.den <- dlap(tau.chain[i-1],mu.chain[i-1],lap.DF)
r <- r.num/r.den
#r <- dlap(tau.chain[i-1],mu.star,lap)/dlap(tau.chain[i-1],mu.chain[i-1],lap)
U <- runif(1)
if (U < min(1,r)) {
mu.chain[i] <- mu.star
} else {
mu.chain[i] <- mu.chain[i-1]
}
}
head(lap.DF - 1)
head(lap.DF - mu.chain[1])
length(lap.DF)
lap.DF <- as.numeric(unlist(lap))
B <- 10000
n <- length(lap.DF)
tau.chain <- numeric(2*B)
mu.chain <- numeric(2*B)
tau.chain[1] <- 1
mu.chain[1] <- 1
dlap <- function(tau, mu, y) { exp(-tau * sum(abs(y - mu))) }
for (i in 2:(2*B)) {
browser()
## Gibbs Sampler for tau ##
tau.chain[i] <- rgamma(1,n,sum(abs(lap.DF-mu.chain[i-1])))
## M-H Sampler for mu ##
mu.star <- rnorm(1,mu.chain[i-1],1)
r.num <- dlap(tau.chain[i-1],mu.star,lap.DF)
r.den <- dlap(tau.chain[i-1],mu.chain[i-1],lap.DF)
r <- r.num/r.den
#r <- dlap(tau.chain[i-1],mu.star,lap)/dlap(tau.chain[i-1],mu.chain[i-1],lap)
U <- runif(1)
if (U < min(1,r)) {
mu.chain[i] <- mu.star
} else {
mu.chain[i] <- mu.chain[i-1]
}
}
head(tau.chain)
mu.star
mu.star
r.num
r.num
r.den
r.den
r
sum(abs(lap.DF - tau.chain[2]))
exp(sum(abs(lap.DF - tau.chain[2])))
B <- 10000
n <- length(lap.DF)
tau.chain <- numeric(2*B)
mu.chain <- numeric(2*B)
tau.chain[1] <- 0.1
mu.chain[1] <- 0.1
dlap <- function(tau, mu, y) { exp(-tau * sum(abs(y - mu))) }
for (i in 2:(2*B)) {
browser()
## Gibbs Sampler for tau ##
tau.chain[i] <- rgamma(1,n,sum(abs(lap.DF-mu.chain[i-1])))
## M-H Sampler for mu ##
mu.star <- rnorm(1,mu.chain[i-1],1)
r.num <- dlap(tau.chain[i-1],mu.star,lap.DF)
r.den <- dlap(tau.chain[i-1],mu.chain[i-1],lap.DF)
r <- r.num/r.den
#r <- dlap(tau.chain[i-1],mu.star,lap)/dlap(tau.chain[i-1],mu.chain[i-1],lap)
U <- runif(1)
if (U < min(1,r)) {
mu.chain[i] <- mu.star
} else {
mu.chain[i] <- mu.chain[i-1]
}
}
B <- 10000
n <- length(lap.DF)
tau.chain <- numeric(2*B)
mu.chain <- numeric(2*B)
tau.chain[1] <- 0.1
mu.chain[1] <- 0.1
dlap <- function(tau, mu, y) { exp(-tau * sum(abs(y - mu))) }
for (i in 2:(2*B)) {
#browser()
## Gibbs Sampler for tau ##
tau.chain[i] <- rgamma(1,n,sum(abs(lap.DF-mu.chain[i-1])))
## M-H Sampler for mu ##
mu.star <- rnorm(1,mu.chain[i-1],1)
r.num <- dlap(tau.chain[i-1],mu.star,lap.DF)
r.den <- dlap(tau.chain[i-1],mu.chain[i-1],lap.DF)
r <- r.num/r.den
#r <- dlap(tau.chain[i-1],mu.star,lap)/dlap(tau.chain[i-1],mu.chain[i-1],lap)
U <- runif(1)
if (U < min(1,r)) {
mu.chain[i] <- mu.star
} else {
mu.chain[i] <- mu.chain[i-1]
}
}
summary(mu.star)
summary(tau.star)
summary(tau.chain)
summary(mu.chain)
quartile(tau.chain, c(0.5,0.05,0.95))
quartile(mu.chain, c(0.5,0.05,0.95))
quantile(tau.chain, c(0.5,0.05,0.95))
quantile(mu.chain, c(0.5,0.05,0.95))
mcmcplots::mcmcplot1(as.matrix(tau.chain))
mcmcplots::mcmcplot1(as.matrix(mu.chain))
mcmcplots::mcmcplot1(as.matrix(tau.chain[B:2*B]))
tau.chain[B:2*B]
length(tau.chain)
tau.chain[10000:20000]
tau.chain[B:B+1]
tau.chain[B:2*B]
tau.chain[B:(2*B)]
mcmcplots::mcmcplot1(as.matrix(tau.chain[B:(2*B)]))
## Full Chain Diagnostics
quantile(tau.chain, c(0.5,0.05,0.95))
## Burn In Diagnostics
quantile(tau.chain[B:(2*B)], c(0.5,0.05,0.95))
quantile(mu.chain, c(0.5,0.05,0.95))
quantile(mu.chain[B:(2*B)], c(0.5,0.05,0.95))
mcmcplots::mcmcplot1(as.matrix(mu.chain[B:(2*B)]))
B <- 10000
n <- length(lap.DF)
tau.chain <- numeric(2*B)
mu.chain <- numeric(2*B)
tau.chain[1] <- 0.1
mu.chain[1] <- 0.1
dlap <- function(tau, mu, y) { exp(-tau * sum(abs(y - mu))) }
for (i in 2:(2*B)) {
#browser()
## Gibbs Sampler for tau ##
tau.chain[i] <- rgamma(1,n,sum(abs(lap.DF-mu.chain[i-1])))
## M-H Sampler for mu ##
mu.star <- rnorm(1,mu.chain[i-1],2)
r.num <- dlap(tau.chain[i-1],mu.star,lap.DF)
r.den <- dlap(tau.chain[i-1],mu.chain[i-1],lap.DF)
r <- r.num/r.den
#r <- dlap(tau.chain[i-1],mu.star,lap)/dlap(tau.chain[i-1],mu.chain[i-1],lap)
U <- runif(1)
if (U < min(1,r)) {
mu.chain[i] <- mu.star
} else {
mu.chain[i] <- mu.chain[i-1]
}
}
mcmcplots::mcmcplot1(as.matrix(tau.chain[B:(2*B)]))
mcmcplots::mcmcplot1(as.matrix(mu.chain[B:(2*B)]))
## Burn In Diagnostics
quantile(tau.chain[B:(2*B)], c(0.5,0.05,0.95))
quantile(mu.chain[B:(2*B)], c(0.5,0.05,0.95))
B <- 10000
n <- length(lap.DF)
tau.chain <- numeric(2*B)
mu.chain <- numeric(2*B)
tau.chain[1] <- 0.1
mu.chain[1] <- 0.1
dlap <- function(tau, mu, y) { exp(-tau * sum(abs(y - mu))) }
for (i in 2:(2*B)) {
#browser()
## Gibbs Sampler for tau ##
tau.chain[i] <- rgamma(1,n,sum(abs(lap.DF-mu.chain[i-1])))
## M-H Sampler for mu ##
mu.star <- rnorm(1,mu.chain[i-1],0.5)
r.num <- dlap(tau.chain[i-1],mu.star,lap.DF)
r.den <- dlap(tau.chain[i-1],mu.chain[i-1],lap.DF)
r <- r.num/r.den
#r <- dlap(tau.chain[i-1],mu.star,lap)/dlap(tau.chain[i-1],mu.chain[i-1],lap)
U <- runif(1)
if (U < min(1,r)) {
mu.chain[i] <- mu.star
} else {
mu.chain[i] <- mu.chain[i-1]
}
}
mcmcplots::mcmcplot1(as.matrix(mu.chain))
quantile(mu.chain[B:(2*B)], c(0.5,0.05,0.95))
mcmcplots::mcmcplot1(as.matrix(mu.chain[B:(2*B)]))
quantile(tau.chain[B:(2*B)], c(0.5,0.05,0.95))
quantile(mu.chain[B:(2*B)], c(0.5,0.05,0.95))
B <- 10000
n <- length(lap.DF)
tau.chain <- numeric(2*B)
mu.chain <- numeric(2*B)
tau.chain[1] <- 0.1
mu.chain[1] <- 0.1
accept <- 1
dlap <- function(tau, mu, y) { exp(-tau * sum(abs(y - mu))) }
for (i in 2:(2*B)) {
#browser()
## Gibbs Sampler for tau ##
tau.chain[i] <- rgamma(1,n,sum(abs(lap.DF-mu.chain[i-1])))
## M-H Sampler for mu ##
mu.star <- rnorm(1,mu.chain[i-1],0.5)    # 1 -> 0.5 better posterior for mu
r.num <- dlap(tau.chain[i-1],mu.star,lap.DF)
r.den <- dlap(tau.chain[i-1],mu.chain[i-1],lap.DF)
r <- r.num/r.den
#r <- dlap(tau.chain[i-1],mu.star,lap)/dlap(tau.chain[i-1],mu.chain[i-1],lap)
U <- runif(1)
if (U < min(1,r)) {
mu.chain[i] <- mu.star
accept <- accept + 1
} else {
mu.chain[i] <- mu.chain[i-1]
}
}
6963/20000
B <- 10000
n <- length(lap.DF)
tau.chain <- numeric(2*B)
mu.chain <- numeric(2*B)
tau.chain[1] <- 0.1
mu.chain[1] <- 0.1
accept <- 1
dlap <- function(tau, mu, y) { exp(-tau * sum(abs(y - mu))) }
for (i in 2:(2*B)) {
#browser()
## Gibbs Sampler for tau ##
tau.chain[i] <- rgamma(1,n,sum(abs(lap.DF-mu.chain[i-1])))
## M-H Sampler for mu ##
mu.star <- rnorm(1,mu.chain[i-1],1)    # 1 -> 0.5 better posterior for mu
r.num <- dlap(tau.chain[i-1],mu.star,lap.DF)
r.den <- dlap(tau.chain[i-1],mu.chain[i-1],lap.DF)
r <- r.num/r.den
#r <- dlap(tau.chain[i-1],mu.star,lap)/dlap(tau.chain[i-1],mu.chain[i-1],lap)
U <- runif(1)
if (U < min(1,r)) {
mu.chain[i] <- mu.star
accept <- accept + 1
} else {
mu.chain[i] <- mu.chain[i-1]
}
}
3764/20000
mcmcplots::mcmcplot1(as.matrix(tau.chain[B:(2*B)]))
mcmcplots::mcmcplot1(as.matrix(mu.chain[B:(2*B)]))
B <- 10000
n <- length(lap.DF)
tau.chain <- numeric(2*B)
mu.chain <- numeric(2*B)
tau.chain[1] <- 0.1
mu.chain[1] <- 0.1
accept <- 1
dlap <- function(tau, mu, y) { exp(-tau * sum(abs(y - mu))) }
for (i in 2:(2*B)) {
#browser()
## Gibbs Sampler for tau ##
tau.chain[i] <- rgamma(1,n,sum(abs(lap.DF-mu.chain[i-1])))
## M-H Sampler for mu ##
mu.star <- rnorm(1,mu.chain[i-1],0.5)    # 1 -> 0.5 better posterior for mu
r.num <- dlap(tau.chain[i-1],mu.star,lap.DF)
r.den <- dlap(tau.chain[i-1],mu.chain[i-1],lap.DF)
r <- r.num/r.den
#r <- dlap(tau.chain[i-1],mu.star,lap)/dlap(tau.chain[i-1],mu.chain[i-1],lap)
U <- runif(1)
if (U < min(1,r)) {
mu.chain[i] <- mu.star
accept <- accept + 1
} else {
mu.chain[i] <- mu.chain[i-1]
}
}
accept/(2*B)
mcmcplots::mcmcplot1(as.matrix(mu.chain[B:(2*B)]))
source("~/Math 640 TA/example_II12.R")
seq(from=0, to=10, by=0.5)
library(mvtnorm)
covmat <- matrix(c(1,2,2,1),ncol=2)
set.seed(123)
x1 <- rmvnorm(10,mean = c(2,3), sigma = covmat)
x2 <- rmvnorm(10,mean = c(1,2), sigma = covmat)
plot(x1,x1)
plot(x1,x2)
par(mfrow=c(1,1))
plot(x1,x2)
x1
plot(x1)
plot(x1)
covmat
x1 <- rmvnorm(100,mean = c(2,3), sigma = covmat)
plot(x1)
covmat <- matrix(c(1,0,0,1),ncol=2)
x1 <- rmvnorm(100,mean = c(2,3), sigma = covmat)
plot(x1)
x1 <- rmvnorm(10,mean = c(2,3), sigma = covmat)
plot(x1)
plot(x1)
x1 <- rmvnorm(100,mean = c(2,3), sigma = covmat)
plot(x1)
plot(x2)
x2 <- rmvnorm(100,mean = c(1,2), sigma = covmat)
plot(x2)
plot(x1,x2)
plot(x1, col=1)
plot(x1, col=1)
plot(x1, col=1)
points(x2, col="blue")
covmat <- matrix(c(1,0,0,1),ncol=2)
set.seed(123)
x1 <- rmvnorm(100,mean = c(2,3), sigma = covmat)
x2 <- rmvnorm(100,mean = c(1,2), sigma = covmat)
plot(x1, col)
points(x2, col="blue")
set.seed(123)
x1 <- rmvnorm(100,mean = c(2,3), sigma = covmat)
x2 <- rmvnorm(100,mean = c(1,2), sigma = covmat)
plot(x1, col)
points(x2, col="blue")
set.seed(123)
x1 <- rmvnorm(100,mean = c(2,3), sigma = covmat)
x2 <- rmvnorm(100,mean = c(1,2), sigma = covmat)
plot(x1)
points(x2, col="blue")
plot(x1, xlim = c(-4,4), ylim = c(-6,6))
points(x2, col="blue")
plot(x1, xlim = c(-2,4), ylim = c(0,6))
points(x2, col="blue")
# calculate a.hat
a.hat <- (mean(x1) - mean(x2)) %*% solve(covmat)
# calculate a.hat
a.hat <- t(mean(x1) - mean(x2)) %*% solve(covmat)
# calculate a.hat
a.hat <- t(mean(x1) - mean(x2)) %*% solve(covmat)
mean(x2)
x2
colMeans(x2)
# calculate a.hat
a.hat <- t(ColMeans(x1) - ColMeans(x2)) %*% solve(covmat)
a.hat
# calculate a.hat
a.hat <- t(colMeans(x1) - colMeans(x2)) %*% solve(covmat)
a.hat
abline(coef = a.hat)
abline(coef = a.hat, col="red")
# calculate m.hat
m.hat <- 0.5*t(colMeans(x1) - colMeans(x2)) %*% solve(covmat) %*%
(colMeans(x1) + colMeans(x2))
m.hat
abline(a=m.hat, col="green")
abline(h=m.hat, col="green")
abline(v=m.hat, col="green")
abline(a = 0.878, b= 1.02-3.893, col="green")
abline(b = 0.878, a= 1.02-3.893, col="green")
m.hat - a.hat[1]*1.5
m.hat - a.hat[1]*1.5 / a.hat[2]
abline(coef = c(1.5,2.6), col="green")
abline(coef = c(2.6,1.5), col="green")
plot(x1, xlim = c(-2,4), ylim = c(0,6))
points(x2, col="blue")
# draw line defined by a.hat
abline(coef = a.hat, col="red")
a.hat[1] * seq(0,5,1) + a.hat[2] * seq(0,5,1)
points(c(2,2))
points(c(2,2), col="green")
m.hat/a.hat[1]
dir?
?dir
root <- setwd("C:/Users/Chris/Documents/Math 652 Materials/math-652-project")
dir("root/data/salar/src")
dir("root/data/salary/src")
dir("root/data/salary/src/")
getwd()
ls
dir(root)
dir(root/data/salary/src)
root <- setwd("C:/Users/Chris/Documents/Math 652 Materials/math-652-project")
dir(root/data/salary/src)
dir(root)
rm(root)
setwd("C:/Users/Chris/Documents/Math 652 Materials/math-652-project")
getwd()
dir("~/data/salary/src")
dir(~/data/salary/src)
dir(".~/data/salary/src")
dir(."~/data/salary/src")
dir("data/salary/src")
?do.call()
?list.files
test <- rbind(lappy(files[1:10],read.csv))
test <- rbind(lapply(files[1:10],read.csv))
fiels
files
files <- dir("data/salary/src")
head(files)
test <- rbind(lapply(files[1:10],read.csv))
test <- rbind(lapply(~files[1:10],read.csv))
test <- rbind(lapply("~files[1:10]",read.csv))
test <- rbind(lapply(files[1:10],read.csv))
getwd()
setwd("C:/Users/Chris/Documents/Math 652 Materials/math-652-project/data/salary/src")
test <- rbind(lapply(files[1:10],read.csv))
View(test)
test <- as.data.frame(lapply(files[1:10],read.csv))
test <- rbind(apply(files[1:10],read.csv))
library(readr)
test <- rbind(lapply(files[1:10],read_csv))
View(test)
test <- read_csv(files[1])
test
library(tibble)
rm(test)
library(tidyverse)
test <- map_df(files, fread) %>%
as_tibble()
test <- map_df(files, read_csv) %>%
as_tibble()
test <- map_df(files[1:10], read_csv) %>%
as_tibble()
test
View(test)
test <- map_df(files[1:10], read_csv, col_types="cccnc" %>%
test <- map_df(files[1:10], read_csv, col_types="cccnc") %>%
as_tibble()
test
salary_DF <- map_df(files, read_csv, col_types="cccnc") %>%
as_tibble()
warnings()
problems()
View(salary_DF)
summary(salary_DF)
View(salary_DF)
plot(density(salary_DF$Salary))
head(is.na(salary_DF$Salary))
which(head(is.na(salary_DF$Salary)))
View(salary_DF)
summary(salary_DF$Salary)
which(is.na(salary_DF$Salary))
plot(density(salary_DF$Salary[-C(na.index)]))
na.index <- which(is.na(salary_DF$Salary))
plot(density(salary_DF$Salary[-C(na.index)]))
typeof(salary_DF$Salary)
plot(density(salary_DF$Salary[-C(na.index),]))
plot(density(salary_DF$Salary[-c(na.index)]))
summary(salary_DF$Salary)
which(salary_DF$Salary == 0)
View(salary_DF)
qqnorm(salary_DF$Salary)
qqnorm(salary_DF$Salary^2)
qqnorm(sqrt(salary_DF$Salary))
qqnorm(log(salary_DF$Salary))
qqnorm(max(log(salary_DF$Salary)),10000)
log(salary_DF$Salary)
qqnorm(salary_DF$Salary^(1/3))
qqnorm(salary_DF$Salary^(1/4))
qqnorm(salary_DF$Salary^(1/5))
View(salary_DF)
salary_DF$player_id^(1/3)
salary_DF$Salary^(1/3)
View(salary_DF)
B <- 10000
B <- 10000
n <- length(lap.DF)
tau.chain <- numeric(2*B)
mu.chain <- numeric(2*B)
tau.chain[1] <- 0.1
mu.chain[1] <- 0.1
accept <- 1
dlap <- function(tau, mu, y) { exp(-tau * sum(abs(y - mu))) }
for (i in 2:(2*B)) {
#browser()
## Gibbs Sampler for tau ##
tau.chain[i] <- rgamma(1,n,sum(abs(lap.DF-mu.chain[i-1])))
## M-H Sampler for mu ##
mu.star <- rnorm(1,mu.chain[i-1],0.5)    # 1 -> 0.5 better posterior for mu
r.num <- dlap(tau.chain[i-1],mu.star,lap.DF)
r.den <- dlap(tau.chain[i-1],mu.chain[i-1],lap.DF)
r <- r.num/r.den
#r <- dlap(tau.chain[i-1],mu.star,lap)/dlap(tau.chain[i-1],mu.chain[i-1],lap)
U <- runif(1)
if (U < min(1,r)) {
mu.chain[i] <- mu.star
accept <- accept + 1
} else {
mu.chain[i] <- mu.chain[i-1]
}
}
## Full Chain Diagnostics
accept/(2*B)
quantile(tau.chain, c(0.5,0.05,0.95))
quantile(mu.chain, c(0.5,0.05,0.95))
